ext.dbfitVersion = '2.0.0-RC5'

task cleanFitnesseroot(type:Exec) {
    executable onWindows() ? 'cmd.exe' : '/bin/sh'
    args onWindows() ? '/C' : '-c', 'git clean -d -x -f FitNesseRoot/'
}

task cleanDist << {
    delete 'dist'
    delete 'zips'
    delete 'docs'
}

task copyLocal(dependsOn: [cleanFitnesseroot, cleanDist, ':dbfit-java:assembleAll', ':dbfit-java:libs']) << {
    copy {
        from 'LICENSE', 'README.md'
        into 'dist'
    }
    copy {
        from 'bin'
        include 'startFitnesse.*', 'encrypt.*'
        into 'dist'
    }
    file('dist/plugins.properties') << 'Theme=bootstrap'
    copy {
        from 'dbfit-java'
        include '**/*.jar'
        exclude 'build/**/*.jar', 'teradata/**/*.jar', '**/ojdbc*.jar'
        into 'dist/lib'
        eachFile {details ->
            details.path = flattenPath(details.path)
        }
        includeEmptyDirs = false 
    }
}


task wikiDocsDir << {
    mkdir('docs/Resources/')
}

task fitnesseUpdateList << {
    copy {
        from zipTree(fitnesseJar()).matching { include 'Resources/updateList' }
        into 'docs'
        rename 'updateList', 'updateList.fitnesse'
    }
}

task dbfitUpdateList(dependsOn: wikiDocsDir) << {
    File f = file('docs/Resources/updateList.dbfit')

    fileTree('FitNesseRoot').each {
        f << "${relativePath(it).toString().replace('\\', '/')}\n"
    }
}

task wikiDocsUpdateList(dependsOn: [fitnesseUpdateList, dbfitUpdateList]) << {
    File f = file('docs/Resources/updateList')

    f << file('docs/Resources/updateList.dbfit').text
    f << file('docs/Resources/updateList.fitnesse').text

    delete 'docs/Resources/updateList.fitnesse'
    delete 'docs/Resources/updateList.dbfit'
}

task wikiDocs(dependsOn: [wikiDocsUpdateList]) << {
    copy {
        from 'FitNesseRoot'
        into 'docs/Resources/FitNesseRoot'
    }

    ant.jar(destfile: 'dist/lib/dbfit-docs.jar', basedir: 'docs', level: 9)
}

def fitnesseJar() {
    fileTree(dir: 'dist/lib', include: 'fitnesse-*.jar').getSingleFile()
}

def flattenPath(def path) {
    path.replaceAll('.*/([^/]*?\\.jar)', {"${it[1]}"})
}

task bundleFitsharp(dependsOn: copyLocal) << {
    mkdir 'dist/fitsharp/'
    ant.get(src: 'http://cloud.github.com/downloads/jediwhale/fitsharp/release.2.2.net.40.zip',
            dest: 'dist/fitsharp/',
            verbose: true)
    copy {
        from zipTree('dist/fitsharp/release.2.2.net.40.zip')
        into 'dist/fitsharp/'
    }
    delete 'dist/fitsharp/release.2.2.net.40.zip'
    file('dist/fitsharp/Runner.exe.config') << '<configuration><runtime><loadFromRemoteSources enabled="true"/></runtime></configuration>'
}


task bundle(type: Zip, dependsOn: [copyLocal, wikiDocs, bundleFitsharp]) {
    description = 'creates the zip file for distributing dbfit'
    from 'dist'
    baseName 'dbfit-complete'
    version dbfitVersion
    destinationDir new File('zips')
}

task start(type: Exec, dependsOn: [copyLocal, wikiDocs, bundleFitsharp]) {
    workingDir './dist'
    description = 'starts fitness with dbfit'
    executable onWindows() ? 'cmd.exe' : '/bin/sh'
    args onWindows() ? '/C' : '-c', onWindows() ? 'startFitnesse.bat' : './startFitnesse.sh'
}

task fastbuild(dependsOn: [':dbfit-java:core:check', ':dbfit-java:derby:check'])

def onWindows() {
    System.properties['os.name'].toLowerCase().contains('windows')
}

