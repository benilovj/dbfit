package dbfit.api;

import dbfit.fixture.StatementExecution;
import dbfit.util.ParameterOrColumn;
import dbfit.util.Direction;
import dbfit.util.NameNormaliser;

import java.sql.SQLException;
import java.util.Map;

import static dbfit.util.Direction.INPUT;
import static dbfit.util.Direction.OUTPUT;

public class DbTable implements DbObject {

    private DBEnvironment dbEnvironment;
    private String tableOrViewName;
    private Map<String, ParameterOrColumn> columns;

    public DbTable(DBEnvironment dbEnvironment, String tableName)
            throws SQLException {
        this.dbEnvironment = dbEnvironment;
        this.tableOrViewName = tableName;
        columns = dbEnvironment.getAllColumns(tableName);
        if (columns.isEmpty()) {
            throw new SQLException("Cannot retrieve list of columns for "
                    + tableName + " - check spelling and access rights");
        }
    }

    public StatementExecution buildPreparedStatement(
            ParameterOrColumn[] accessors) throws SQLException {
        StatementExecution statement = new StatementExecution(dbEnvironment
                .buildInsertPreparedStatement(tableOrViewName, accessors));

        for (int i = 0; i < accessors.length; i++) {
            accessors[i].bindTo(statement, i + 1);
        }
        return statement;
    }

    public ParameterOrColumn getDbParameterAccessor(String columnName,
            Direction expectedDirection) {
        String normalisedColumnName = NameNormaliser.normaliseName(columnName);
        ParameterOrColumn column = columns.get(normalisedColumnName);
        if (null == column) {
            throw new RuntimeException(
                    "No such database column: '" + normalisedColumnName + "'");
        }

        if (column.hasDirection(INPUT)
                && expectedDirection == OUTPUT) {
            column = dbEnvironment
                    .createAutogeneratedPrimaryKeyColumn(column);
        }
        return column;
    }
}
