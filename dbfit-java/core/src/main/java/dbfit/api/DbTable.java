package dbfit.api;

import dbfit.util.DbParameterAccessor;
import dbfit.util.DbParameterAccessors;
import dbfit.util.Direction;
import dbfit.util.NameNormaliser;

import java.sql.SQLException;
import java.util.Map;
import java.util.ArrayList;
import java.util.Arrays;

import static dbfit.util.Direction.INPUT;
import static dbfit.util.Direction.OUTPUT;

public class DbTable {

    private DBEnvironment dbEnvironment;
    private String tableOrViewName;
    private Map<String, DbParameterAccessor> columns;

    public DbTable(DBEnvironment dbEnvironment, String tableName)
            throws SQLException {
        this.dbEnvironment = dbEnvironment;
        this.tableOrViewName = tableName;
        columns = dbEnvironment.getAllColumns(tableName);
        if (columns.isEmpty()) {
            throw new SQLException("Cannot retrieve list of columns for "
                    + tableName + " - check spelling and access rights");
        }
    }

    public DbCommand buildInsertCommand(
            DbParameterAccessor[] accessors) throws SQLException {
        return dbEnvironment.buildInsertCommand(tableOrViewName, accessors);
    }

    public DbCommand buildUpdateCommand(
                DbParameterAccessor[] selectAccessors,
                DbParameterAccessor[] updateAccessors) throws SQLException {
        StringBuilder s = new StringBuilder("update ").append(tableOrViewName).append(" set ");

        for (int i = 0; i < updateAccessors.length; i++) {
            if (i > 0) {
                s.append(", ");
            }
            s.append(updateAccessors[i].getName()).append("=").append("?");
        }

        s.append(" where ");

        for (int i = 0; i < selectAccessors.length; i++) {
            if (i > 0) {
                s.append(" and ");
            }
            s.append(selectAccessors[i].getName()).append("=").append("?");
        }

        DbStatement statement = dbEnvironment.createDbStatement(s.toString());

        ArrayList<DbParameterAccessor> allAccessors =
            new ArrayList<>(Arrays.asList(updateAccessors));
        allAccessors.addAll(Arrays.asList(selectAccessors));
        new DbParameterAccessors(allAccessors).bindParametersInGivenOrder(statement);

        return statement;
    }

    public DbParameterAccessor getDbParameterAccessor(String columnName,
            Direction expectedDirection) {
        String normalisedName = NameNormaliser.normaliseName(columnName);
        DbParameterAccessor accessor = columns.get(normalisedName);
        if (null == accessor) {
            throw new RuntimeException(
                    "No such database column or parameter: '" + normalisedName + "'");
        }

        if (accessor.hasDirection(INPUT) && expectedDirection == OUTPUT) {
            accessor = dbEnvironment
                    .createAutogeneratedPrimaryKeyAccessor(accessor);
        }
        return accessor;
    }

}
